import{R as g,S as r}from"./index.80abe7d4.js";import{u as n,a as i}from"./socket.store.1ac043d9.js";const d=g("station-tasks",{state:()=>({tasksList:[],loading:!1}),getters:{tasks:s=>t=>{let e=[];return t===""?e=s.tasksList:e=s.tasksList.filter(a=>a.name.toLowerCase().includes(t.toLowerCase())),e}},actions:{init(){const s=n();s.on("stationTasks",async t=>{const e=t.message;this.tasksList=e.message,this.loading=!1}),s.on("stationTaskDeleted",async()=>{this.getTasks()}),s.on("stationTaskUpdated",async t=>{const a=t.message.message;this.tasksList=this.tasksList.map(o=>o.id===a.id?a:o)}),s.on("stationTaskMoved",async t=>{console.log(t)})},async getTasks(){this.loading=!0;const s=n(),e=i().getCurrentStation();!e||s.emit("getStationTasks",e,{message:"getStationTasks"})},async deleteTask(s){const t=n(),a=i().getCurrentStation();t.emit("deleteStationTask",a,{id:s})},async updateTask(s){const t=n(),a=i().getCurrentStation();t.emit("updateStationTask",a,{task:s})},async moveTaskToStation(s,t){const e=n(),{id:a,category:o,...m}=t;e.emit("moveStationTask",s,{task:m})},getTaskById(s){return this.tasksList.find(t=>t.id===s)}}}),k=s=>{const t=JSON.parse(s.content);return t.id=s.id,t},c=s=>{const{id:t,...e}=s;return{id:t,content:JSON.stringify(e)}},T=g("programs",{state:()=>({tasksList:[],loading:!1}),getters:{tasks:s=>(t,e)=>{let a=[];return t!==""?a=s.tasksList.filter(o=>o.name.toLowerCase().includes(t.toLowerCase())):e!==""?a=s.tasksList.filter(o=>o.category&&o.category.toLowerCase().includes(e.toLowerCase())):a=s.tasksList,a}},actions:{async getTasks(){this.loading=!0,this.tasksList=[];try{const s=await r.fetch("programs");s.error||(s.result||[]).forEach(e=>{this.tasksList.push(k(e))})}catch{}this.loading=!1},async moveToServer(s){if(!s)return;const t=c(s);await r.insert("programs",{record:t})},async insert(s){const t=c(s),e=await r.insert("programs",{record:t});if(e.result){const a=k(e.result);this.tasksList.push(a)}},async update(s){const t=c(s);(await r.update("programs",{record:t})).result&&(this.tasksList=this.tasksList.map(a=>a.id===s.id?{...s}:a))},async delete(s){(await r.remove("programs",s)).result&&(this.tasksList=this.tasksList.filter(e=>e.id!==s))},getTaskById(s){return this.tasksList.find(t=>t.id===s)},moveToStation(s,t){d().moveTaskToStation(s,t)}}});export{d as a,T as u};
