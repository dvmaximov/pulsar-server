import{R as L,S as r}from"./index.39e089c8.js";import{u as i,a as n}from"./socket.store.0f823f3a.js";const d=L("station-tasks",{state:()=>({tasksList:[],loading:!1}),getters:{tasks:s=>t=>{let e=[];return t===""?e=s.tasksList:e=s.tasksList.filter(a=>a.name.toLowerCase().includes(t.toLowerCase())),e}},actions:{init(){const s=i();s.on("stationTasks",async t=>{const e=t.message;this.tasksList=e.message,this.loading=!1}),s.on("stationTaskDeleted",async()=>{this.getTasks()}),s.on("stationTaskUpdated",async t=>{const a=t.message.message;this.tasksList=this.tasksList.map(o=>o.id===a.id?a:o)}),s.on("stationTaskMoved",async t=>{console.log(t)})},async getTasks(){this.loading=!0;const s=i(),e=n().getCurrentStation();!e||s.emit("getStationTasks",e,{message:"getStationTasks"})},async deleteTask(s){const t=i(),a=n().getCurrentStation();t.emit("deleteStationTask",a,{id:s})},async updateTask(s){const t=i(),a=n().getCurrentStation();t.emit("updateStationTask",a,{task:s})},async moveTaskToStation(s,t){const e=i(),{id:a,category:o,...l}=t;e.emit("moveStationTask",s,{task:l})},getTaskById(s){return this.tasksList.find(t=>t.id===s)}}});var g=(s=>(s[s.BALL_LEFT=0]="BALL_LEFT",s[s.BALL_RIGHT=1]="BALL_RIGHT",s))(g||{});const c=s=>{const t=JSON.parse(s.content);return t.id=s.id,t},k=s=>{const{id:t,...e}=s;return{id:t,content:JSON.stringify(e)}},T=L("programs",{state:()=>({tasksList:[],loading:!1}),getters:{tasks:s=>(t,e)=>{let a=[];return t!==""?a=s.tasksList.filter(o=>o.name.toLowerCase().includes(t.toLowerCase())):e!==""?a=s.tasksList.filter(o=>o.category&&o.category.toLowerCase().includes(e.toLowerCase())):a=s.tasksList,a}},actions:{async getTasks(){this.loading=!0,this.tasksList=[];try{const s=await r.fetch("programs");s.error||(s.result||[]).forEach(async e=>{const a=c(e);a.ball||(a.ball=g.BALL_LEFT,await this.update(a)),this.tasksList.push(c(e))})}catch{}await this.checkBallForTask(),this.loading=!1},async checkBallForTask(){for(let s=0;s<this.tasksList.length;s++)this.tasksList[s].ball||(this.tasksList[s].ball=g.BALL_LEFT,await this.update(this.tasksList[s]))},async moveToServer(s){if(!s)return;const t=k(s);await r.insert("programs",{record:t})},async insert(s){const t=k(s),e=await r.insert("programs",{record:t});if(e.result){const a=c(e.result);this.tasksList.push(a)}},async update(s){const t=k(s);(await r.update("programs",{record:t})).result&&(this.tasksList=this.tasksList.map(a=>a.id===s.id?{...s}:a))},async delete(s){(await r.remove("programs",s)).result&&(this.tasksList=this.tasksList.filter(e=>e.id!==s))},getTaskById(s){return this.tasksList.find(t=>t.id===s)},moveToStation(s,t){d().moveTaskToStation(s,t)}}});export{d as a,T as u};
